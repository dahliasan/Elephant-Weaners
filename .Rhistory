mutate(D.DATE = D.DATE %>% as.character() %>% mdy_hms())
## Get rid of the "labelled" class attribute for numeric columns
df <- df %>% mutate_if(is.numeric, as.numeric)
## Select only relevant columns and rename them
weaners <- df %>%
select(ref, D.DATE, LQ, LON, LAT)
colnames(weaners) <- c('id', 'date', 'lc', 'lon', 'lat')
weaners$id <- weaners$id %>% as.character()
weaners
# Fit SSM -----------------------------------------------------------------
weaners <- weaners %>% filter(!id == 'mq1-22488-95') # this seal had < 3 locations
fit <- fit_ssm(weaners, model= 'crw', time.step = 24, verbose = 0, map = list(psi = factor(NA)))
fit$ssm
fit$ssm[[1]]
fit$ssm[[2]]
fit$ssm[[3]]
fit$ssm[[3]]
## Select only relevant columns and rename them
weaners <- df %>%
select(ref, D.DATE, LQ, LON, LAT)
colnames(weaners) <- c('id', 'date', 'lc', 'lon', 'lat')
weaners$id <- weaners$id %>% factor()
# Fit SSM -----------------------------------------------------------------
weaners <- weaners %>% filter(!id == 'mq1-22488-95') # this seal had < 3 locations
fit <- fit_ssm(weaners, model= 'crw', time.step = 24, verbose = 0, map = list(psi = factor(NA)))
weaners
## Select only relevant columns and rename them
weaners <- df %>%
select(ref, D.DATE, LQ, LON, LAT)
colnames(weaners) <- c('id', 'date', 'lc', 'lon', 'lat')
weaners$id <- weaners$id %>% as.character()
# Fit SSM -----------------------------------------------------------------
weaners <- weaners %>% filter(!id == 'mq1-22488-95') # this seal had < 3 locations
fit <- fit_ssm(weaners, model= 'crw', time.step = 24, verbose = 0, map = list(psi = factor(NA)))
fit
fit$ssm[1]
fit <- fit_ssm(weaners, model= 'crw', time.step = 6, verbose = 0, map = list(psi = factor(NA)))
fit %>% str()
fit$converged
fit$ssm
View(fit)
fit <- fit_ssm(weaners, model= 'crw', time.step = 6, scale = TRUE, verbose = 0, map = list(psi = factor(NA)))
fit <- fit_ssm(weaners, model= 'crw', time.step = 6, scale = TRUE, verbose = 0)
fit <- fit_ssm(weaners, model= 'crw', time.step = NA, scale = TRUE, verbose = 0)
fit <- fit_ssm(weaners, model= 'crw', time.step = NA, scale = TRUE)
fit <- fit_ssm(weaners, model= 'crw', vmax = 2, time.step = NA, scale = TRUE)
fit <- fit_ssm(weaners, model= 'crw', vmax = 2, time.step = NA, verbose = FALSE)
fit <- fit_ssm(weaners, model= 'crw', vmax = 2, time.step = NA, verbose = 0)
df <- mdb$diag %>% as_tibble() %>% select(-PTT, -ACTUAL.PTT)
df2 <- mdb2$diag %>% as_tibble() %>% select(-PTT, -ACTUAL.PTT)
df <- bind_rows(df, df2)
df
df %>% View()
write.csv(df, './Data/mq_ellie_weaners_argos.csv')
weaners
write_csv(df, './Data/mq-ellie-weaners-argos.csv')
ellies
weaners
weaners$lc <- weaners$id %>% as.factor()
weaners
# Fit SSM -----------------------------------------------------------------
weaners <- weaners %>% filter(!id == 'mq1-22488-95') # this seal had < 3 locations
fit <- fit_ssm(weaners, model= 'crw', vmax = 2, time.step = NA, verbose = 0, map = list(psi = factor(NA)))
fit <- fit_ssm(weaners, model= 'crw', time.step = 24, verbose = 0, map = list(psi = factor(NA)))
fit <- fit_ssm(ellies, vmax = 4, model = "crw", time.step = 24, verbose = 0)
fit
mdb
mdb$deployments
mdb$dive
mdb$haulout
mdb$sms_intermediate
mdb$haulout_orig
mdb$summary
mdb$tag_info
mdb$cruise
# Plot raw locations ------------------------------------------------------
weaners %>%
ggplot(aes(lon, lat, colour = id)) +
geom_point() +
geom_path()
weaners_split <- split(weaners, weaners$id)
summary(weaners_split)
weaners %>%
slice(id)
?slice
df <- mdb$diag %>% as_tibble()
df2 <- mdb2$diag %>% as_tibble()
df <- bind_rows(df, df2)
df <- mdb$diag %>% as_tibble() %>% select(-PTT) %>% mutate(ACTUAL.PTT = ACTUAL.PTT %>% as.character)
df2 <- mdb2$diag %>% as_tibble() %>% select(-PTT) %>% mutate(ACTUAL.PTT = ACTUAL.PTT %>% as.character)
df <- bind_rows(df, df2)
write_csv(df, './Data/mq-ellie-weaners-argos.csv')
## Parse Date Time
df <- df %>%
mutate(D.DATE = D.DATE %>% as.character() %>% mdy_hms())
## Get rid of the "labelled" class attribute for numeric columns
df <- df %>% mutate_if(is.numeric, as.numeric)
## Select only relevant columns and rename them
weaners <- df %>%
select(ACTUAL.PTT, D.DATE, LQ, LON, LAT)
colnames(weaners) <- c('id', 'date', 'lc', 'lon', 'lat')
weaners$id <- weaners$id %>% as.character()
weaners$lc <- weaners$id %>% as.factor()
weaners_split <- split(weaners, weaners$id)
weaners_split %>% summary
fit <- fit_ssm(weaners, model= 'crw', time.step = 24, verbose = 0, map = list(psi = factor(NA)))
# Plot raw locations ------------------------------------------------------
weaners %>%
group_by(id) %>%
nest()
weaners %>%
ggplot(aes(lon, lat, colour = id)) +
geom_point() +
geom_path()
install.packages("trip")
library(trip)
# Fit SSM -----------------------------------------------------------------
library(argosfilter)
weaners %>%
group_by(id) %>%
nest()
library(Hmisc)
library(tidyverse)
library(lubridate)
library(trip)
## Install foieGras
# remotes::install_github("ianjonsen/foieGras")
library(foieGras)
weaners %>%
group_by(id) %>%
nest()
# Fit SSM -----------------------------------------------------------------
library(argosfilter)
weaners %>%
group_by(id) %>%
nest() %>%
.$data
w <- weaners %>%
group_by(id) %>%
nest() %>%
.$data
w <- weaners %>%
group_by(id) %>%
nest() %>%
.$data %>%
map(function(x) {
x$filter <- with(x, vmask(lat, lon, date, 4))
x
})
w
w <- weaners %>%
group_by(id) %>%
nest()
w
w$data <- w
w <- weaners %>%
group_by(id) %>%
nest()
w$data <- w %>%
.$data %>%
map(function(x) {
x$filter <- with(x, vmask(lat, lon, date, 4))
x
})
w
w
w$data
w$data <- w %>%
.$data %>%
map(function(x) {
x$filter <- with(x, vmask(lat, lon, date, 4))
x %>% filter(filter == 'not')
})
w
w$data
w %>% unnest()
w %>% unnest(cols = c(data))
w <- w %>%
unnest(cols = c(data)) %>%
select(-filter)
w
weaners
fit <- fit_ssm(weaners, model= 'crw', time.step = 24, verbose = 0, map = list(psi = factor(NA)), fit.to.subset = FALSE)
fit <- fit_ssm(w, model= 'crw', time.step = 24, verbose = 0, map = list(psi = factor(NA)), fit.to.subset = FALSE)
w <- w %>% filter(!id == '17213')
fit <- fit_ssm(w, model= 'crw', time.step = 24, verbose = 0, map = list(psi = factor(NA)), fit.to.subset = FALSE)
w
w <- w %>% ungroup()
w
fit <- fit_ssm(w, model= 'crw', time.step = 24, verbose = 0, map = list(psi = factor(NA)), fit.to.subset = FALSE)
w
w <- weaners %>%
group_by(id) %>%
nest()
w$data
## Select only relevant columns and rename them
weaners <- df %>%
select(ACTUAL.PTT, D.DATE, LQ, LON, LAT)
colnames(weaners) <- c('id', 'date', 'lc', 'lon', 'lat')
weaners$id <- weaners$id %>% as.character()
weaners$lc <- weaners$id %>% as.character()
weaners
df
## Select only relevant columns and rename them
weaners <- df %>%
select(ACTUAL.PTT, D.DATE, LQ, LON, LAT)
colnames(weaners) <- c('id', 'date', 'lc', 'lon', 'lat')
weaners$id <- weaners$id %>% as.character()
weaners$lc <- weaners$lc %>% factor()
weaners
w <- weaners %>%
group_by(id) %>%
nest()
w$data <- w %>%
.$data %>%
map(function(x) {
x$filter <- with(x, vmask(lat, lon, date, 4))
x %>% filter(filter == 'not')
})
w <- w %>%
unnest(cols = c(data)) %>%
select(-filter) %>%
ungroup()
w <- w %>% filter(!id == '17213')
fit <- fit_ssm(w, model= 'crw', time.step = 24, verbose = 0, map = list(psi = factor(NA)), fit.to.subset = FALSE)
w
fit <- fit_ssm(w, model= 'crw', vmax = 4, time.step = 24, verbose = 0, map = list(psi = factor(NA)))
w %>%
ggplot(aes(lon, lat, colour = id)) +
geom_point() +
geom_path()
mdb$haulout
ellies
ellies %>% View()
fit$ssm
fit$ssm[[1]]
fit <- fit_ssm(weaner, model= 'crw', pf = TRUE, vmax = 4, time.step = 24, verbose = 0, map = list(psi = factor(NA)))
fit <- fit_ssm(weaners, model= 'crw', pf = TRUE, vmax = 4, time.step = 24, verbose = 0, map = list(psi = factor(NA)))
w <- weaners %>%
group_by(id) %>%
nest()
w
fit <- fit_ssm(weaners %>% filter(id == '2849'), model= 'crw', pf = TRUE, vmax = 4, time.step = 24, verbose = 0, map = list(psi = factor(NA)))
fit
fit %>% View()
fit <- fit_ssm(weaners %>% filter(id == '2849'), model= 'crw',  vmax = 4, time.step = 24, verbose = 0, map = list(psi = factor(NA)))
fit <- fit_ssm(weaners %>% filter(id == '2849'), model= 'crw',  vmax = 4, time.step = 24, verbose = 0, map = list(psi = factor(NA)), optMeth = 'nlminb')
fit <- fit_ssm(weaners %>% filter(id == '2849'), model= 'crw',  vmax = 4, time.step = 24, verbose = 0, map = list(psi = factor(NA)), optim = 'nlminb')
fit <- fit_ssm(weaners %>% filter(id == '2849'), model= 'crw',  vmax = 4, time.step = 24, verbose = 0, map = list(rho = factor(NA)), optim = 'nlminb')
fit <- fit_ssm(weaners %>% filter(id == '2849'), model= 'crw',  vmax = 4, time.step = 24, verbose = 0, map = list(rho = factor(NA)))
fit <- fit_ssm(weaners %>% filter(id == '2849'), model= 'crw',  vmax = 4, time.step = 24, verbose = 0, map = list(rho_o = factor(NA)))
fit <- fit_ssm(weaners %>% filter(id == '2849'), model= 'crw',  vmax = 4, time.step = 24, verbose = 0,
map = list(rho_o = factor(NA), psi = factor(NA)))
fit <- fit_ssm(weaners %>% filter(id == '2849'), model= 'crw',  vmax = 4, time.step = 24, verbose = 0,
map = list(rho_o = factor(NA), tau = factor(NA)))
fit <- fit_ssm(weaners %>% filter(id == '2849'), model= 'crw',  vmax = 4, time.step = 24, verbose = 0,
map = list(rho_o = factor(NA)))
fit <- fit_ssm(weaners %>% filter(id == '2849'), model= 'crw',  vmax = 4, time.step = 24, verbose = 0,
map = list(rho_o = factor(NA), D = factor(NA)))
fit <- fit_ssm(weaners %>% filter(id == '2849'), model= 'crw',  vmax = 4, time.step = 24, verbose = 0,
map = list(rho_o = factor(NA), tau_x = factor(NA)))
fit <- fit_ssm(weaners %>% filter(id == '2849'), model= 'crw',  vmax = 4, time.step = 24, verbose = 0,
map = list(rho_o = factor(NA), logD = factor(NA)))
fit <- fit_ssm(weaners %>% filter(id == '2849'), model= 'crw',  vmax = 4, time.step = 24, verbose = 0,
map = list( logD = factor(NA)))
fit <- fit_ssm(weaners %>% filter(id == '2849'), model= 'crw',  vmax = 4, time.step = 24, verbose = 0,
map = list(rho_o = factor(NA), psi = factor(NA)))
fit <- fit_ssm(weaners %>% filter(id == '2849'), model= 'crw',  vmax = 4, time.step = 24, verbose = 0,
map = list(rho_o = factor(NA), rho_p = factor(NA)))
fit <- fit_ssm(weaners %>% filter(id == '2849'), model= 'crw',  vmax = 4, time.step = 24, verbose = 0,
map = list(rho_o = factor(NA)))
fit <- fit_ssm(weaners %>% filter(id == '2849'), model= 'crw',  vmax = 4, time.step = 24, verbose = 0,
map = list(rho_o = factor(NA)), optMeth ="Nelder-Mead" )
fit <- fit_ssm(weaners %>% filter(id == '2849'), model= 'crw',  vmax = 4, time.step = 24, verbose = 0,
map = list(rho_o = factor(NA)), optMeth ="BFGS")
fit <- fit_ssm(weaners %>% filter(id == '2849'), model= 'crw',  vmax = 4, time.step = 24, verbose = 0,
map = list(rho_o = factor(NA)), optMeth ="CG")
fit <- fit_ssm(weaners %>% filter(id == '2849'), model= 'crw',  vmax = 4, time.step = 24, verbose = 0,
map = list(rho_o = factor(NA)), optMeth = "SANN")
fit <- fit_ssm(weaners %>% filter(id == '2849'), model= 'crw',  vmax = 4, time.step = 24, verbose = 0,
map = list(rho_o = factor(NA)), optMeth = "Brent")
fit <- fit_ssm(weaners %>% filter(id == '2849'), model= 'crw',  vmax = 4, time.step = 48, verbose = 0,
map = list(rho_o = factor(NA)))
fit <- fit_ssm(weaners %>% filter(id == '2849'), model= 'crw',  vmax = 4, time.step = 64, verbose = 0,
map = list(rho_o = factor(NA)))
fit <- fit_ssm(weaners %>% filter(id == '2849'), model= 'crw',  vmax = 5, time.step = 48, verbose = 0,
map = list(rho_o = factor(NA)))
# smooth using a state space model
install.packages("bsam")
library(bsam)
install.packages("rjags")
library(bsam)
install.packages("rjags")
library(bsam)
devtools::install_url("http://sourceforge.net/projects/mcmc-jags/files/rjags/3/rjags_3-2.tar.gz",
args="--configure-args='--with-jags-include=/Users/casallas/homebrew/opt/jags/include/JAGS
--with-jags-lib=/Users/casallas/homebrew/opt/jags/lib'
devtools::install_url("http://sourceforge.net/projects/mcmc-jags/files/rjags/3/rjags_3-2.tar.gz",
args="--configure-args='--with-jags-include=/Users/casallas/homebrew/opt/jags/include/JAGS
--with-jags-lib=/Users/casallas/homebrew/opt/jags/lib'
"
)
library(rjags)
install.packages("rjags")
install.packages("TMB")
library(tidyverse)
library(lubridate)
library(foieGras)
library(sf)
library(sp)
library(raster)
# Step 1: Prepare data ------------------------------------------------------------
w1 <- read_csv("./Data/mq-ellie-weaners-argos.csv")
w1 <- w1 %>%
mutate(date = d.date %>% mdy_hms())
w2 <-  w1 %>%
dplyr::select(ref, date, lq, lon, lat) %>%
dplyr::rename(id=ref, lc=lq)
## convert to foisGras format
w2 <- w2 %>% mutate(lc = replace(lc, lc == -9, "Z"), lc = replace(lc, lc == -2, "B"), lc = replace(lc, lc == -1, "A"))
## only keep seals with 10 days of data
dur <- w2 %>%
group_by(id) %>%
summarise(first = min(date), last = max(date)) %>%
mutate(dur = difftime(last, first)) %>%
filter(dur > 240) %>%
pull(id)
##ensure the data are sorted by id and date and remove duplicates and locations too far north
d1 <- w2 %>%
filter(id %in% dur) %>%
arrange(id, date) %>%
group_by(id) %>%
distinct(date, .keep_all = TRUE) %>%
filter(lat < -20) %>%
dplyr::select(1:5)
# Plot raw locations ------------------------------------------------------
############################################################
## initial plots of tracks
crs <- "+proj=stere +lon_0=170 +lat_0=-90 +units=km +datum=WGS84"
coordinates(d1) <- c("lon", "lat")
projection(d1) <-  "+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"
## Set up as a "simple feature" for plotting in ggplot
d <- d1 %>%
st_as_sf(d1)
## project data to Antarctic Stereographic
d_sf <- d %>% st_transform(crs = crs)
## get high-res land & apply stereo projection
world_sf <- st_as_sf(rworldmap::getMap(resolution = "high")) %>%
st_transform(., crs = crs)
bb <- extent(d_sf)
raw_plot <- ggplot() +
geom_sf(data = d_sf, size=.1) +
geom_sf(data = world_sf, fill = grey(0.4), colour = NA) +
# xlim(bb[1], bb[2]) + ylim(bb[3], bb[4]) + # show extent of all raw locations
xlim(bb[1]+4500, bb[2]-5000) + ylim(bb[3]+4000, bb[4]-500) # crop out outlier locations
raw_plot
# Step 2. Fit the SSM -----------------------------------------------------
## uses a speed max of 7.0 m/s (approx 25 km/h)
d3 <- as_tibble(d1)
table(d3$id)
range(d3$date)
##time step of 24 = 1 per day
fit_all <- foieGras::fit_ssm(d3,
vmax = 7,
map = list(psi = factor(NA)),
model = "crw",
optim = c("nlminb"),
time.step = 4)
## extract the predicted values - ie estimated location every day - in lat/lon format
ssm <- grab(fit_all, "predicted", as_sf=FALSE)
dmp1 <-  ssm
## plot the ssm data
coordinates(dmp1) <- c("lon", "lat")
projection(dmp1) <-  "+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"
ssmp <- dmp1 %>%
st_as_sf(dmp1)
## project data to Antarctic Stereographic
ssmp_sf <- ssmp %>% st_transform(crs = crs)
ssm_plot <- ggplot() +
geom_sf(data = ssmp_sf, size=.1) +
geom_sf(data = world_sf, fill = grey(0.4), colour = NA) +
xlim(bb[1]+3500, bb[2]-7000) + ylim(bb[3]+5000, bb[4]-500)
ssm_plot
install.packages("TMB")
library(TMB)
library(glmmTMB)
library(tidyverse)
library(lubridate)
library(foieGras)
library(sf)
library(sp)
library(raster)
# Step 1: Prepare data ------------------------------------------------------------
w1 <- read_csv("./Data/mq-ellie-weaners-argos.csv")
w1 <- w1 %>%
mutate(date = d.date %>% mdy_hms())
w2 <-  w1 %>%
dplyr::select(ref, date, lq, lon, lat) %>%
dplyr::rename(id=ref, lc=lq)
## convert to foisGras format
w2 <- w2 %>% mutate(lc = replace(lc, lc == -9, "Z"), lc = replace(lc, lc == -2, "B"), lc = replace(lc, lc == -1, "A"))
## only keep seals with 10 days of data
dur <- w2 %>%
group_by(id) %>%
summarise(first = min(date), last = max(date)) %>%
mutate(dur = difftime(last, first)) %>%
filter(dur > 240) %>%
pull(id)
##ensure the data are sorted by id and date and remove duplicates and locations too far north
d1 <- w2 %>%
filter(id %in% dur) %>%
arrange(id, date) %>%
group_by(id) %>%
distinct(date, .keep_all = TRUE) %>%
filter(lat < -20) %>%
dplyr::select(1:5)
# Plot raw locations ------------------------------------------------------
############################################################
## initial plots of tracks
crs <- "+proj=stere +lon_0=170 +lat_0=-90 +units=km +datum=WGS84"
coordinates(d1) <- c("lon", "lat")
projection(d1) <-  "+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"
## Set up as a "simple feature" for plotting in ggplot
d <- d1 %>%
st_as_sf(d1)
## project data to Antarctic Stereographic
d_sf <- d %>% st_transform(crs = crs)
## get high-res land & apply stereo projection
world_sf <- st_as_sf(rworldmap::getMap(resolution = "high")) %>%
st_transform(., crs = crs)
bb <- extent(d_sf)
raw_plot <- ggplot() +
geom_sf(data = d_sf, size=.1) +
geom_sf(data = world_sf, fill = grey(0.4), colour = NA) +
# xlim(bb[1], bb[2]) + ylim(bb[3], bb[4]) + # show extent of all raw locations
xlim(bb[1]+4500, bb[2]-5000) + ylim(bb[3]+4000, bb[4]-500) # crop out outlier locations
raw_plot
# Step 2. Fit the SSM -----------------------------------------------------
## uses a speed max of 7.0 m/s (approx 25 km/h)
d3 <- as_tibble(d1)
table(d3$id)
range(d3$date)
##time step of 24 = 1 per day
fit_all <- foieGras::fit_ssm(d3,
vmax = 7,
map = list(psi = factor(NA)),
model = "crw",
optim = c("nlminb"),
time.step = 4)
install.packages("glmmTMB", type="source")
library(tidyverse)
library(lubridate)
library(foieGras)
library(sf)
library(sp)
library(raster)
# Step 1: Prepare data ------------------------------------------------------------
w1 <- read_csv("./Data/mq-ellie-weaners-argos.csv")
w1 <- w1 %>%
mutate(date = d.date %>% mdy_hms())
w2 <-  w1 %>%
dplyr::select(ref, date, lq, lon, lat) %>%
dplyr::rename(id=ref, lc=lq)
## convert to foisGras format
w2 <- w2 %>% mutate(lc = replace(lc, lc == -9, "Z"), lc = replace(lc, lc == -2, "B"), lc = replace(lc, lc == -1, "A"))
dur <- w2 %>%
group_by(id) %>%
summarise(first = min(date), last = max(date)) %>%
mutate(dur = difftime(last, first)) %>%
filter(dur > 240) %>%
pull(id)
##ensure the data are sorted by id and date and remove duplicates and locations too far north
d1 <- w2 %>%
filter(id %in% dur) %>%
arrange(id, date) %>%
group_by(id) %>%
distinct(date, .keep_all = TRUE) %>%
filter(lat < -20) %>%
dplyr::select(1:5)
# Plot raw locations ------------------------------------------------------
############################################################
## initial plots of tracks
crs <- "+proj=stere +lon_0=170 +lat_0=-90 +units=km +datum=WGS84"
coordinates(d1) <- c("lon", "lat")
projection(d1) <-  "+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"
## Set up as a "simple feature" for plotting in ggplot
d <- d1 %>%
st_as_sf(d1)
## project data to Antarctic Stereographic
d_sf <- d %>% st_transform(crs = crs)
## get high-res land & apply stereo projection
world_sf <- st_as_sf(rworldmap::getMap(resolution = "high")) %>%
st_transform(., crs = crs)
bb <- extent(d_sf)
raw_plot <- ggplot() +
geom_sf(data = d_sf, size=.1) +
geom_sf(data = world_sf, fill = grey(0.4), colour = NA) +
# xlim(bb[1], bb[2]) + ylim(bb[3], bb[4]) + # show extent of all raw locations
xlim(bb[1]+4500, bb[2]-5000) + ylim(bb[3]+4000, bb[4]-500) # crop out outlier locations
raw_plot
# Step 2. Fit the SSM -----------------------------------------------------
## uses a speed max of 7.0 m/s (approx 25 km/h)
d3 <- as_tibble(d1)
table(d3$id)
range(d3$date)
##time step of 24 = 1 per day
fit_all <- foieGras::fit_ssm(d3,
vmax = 7,
map = list(psi = factor(NA)),
model = "crw",
optim = c("nlminb"),
time.step = 4)
