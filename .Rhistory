# Build report ------------------------------------------------------------
seals <- loc_final$id %>% unique
build_report(loc_final %>% filter(id == "mq4-Billie-00"),
path = './',
proj4 = "+proj=stere +lon_0=170 +lat_0=-90 +datum=WGS84",
stats = c("rolling", "diurnal", "lunar"),
construct = "akde")
build_report(loc_final %>% filter(id == "mq4-Billie-00"),
path = './',
proj4 = "+proj=stere +lon_0=170 +lat_0=-90 +datum=WGS84",
stats = c("rolling", "diurnal", "lunar"))
loc %>%
st_as_sf()
?st_as_sf
loc
loc %>%
st_as_sf(coords = 7:8, crs = proj) %>%
st_transform(crs = "+proj=stere +lat_0=90")
loc_sf <- loc %>%
st_as_sf(coords = 7:8, crs = proj) %>%
st_transform(crs = "+proj=stere +lat_0=90")
loc_sf %>%
ggplot() +
geom_sf()
# Pre-processing ----------------------------------------------------------
## convert to correct projection
loc_sf <- convert2polarsf(loc)
loc_sf %>%
ggplot() +
geom_sf()
loc_sf <- loc %>%
st_as_sf(coords = 7:8, crs = proj) %>%
st_transform(crs = "+proj=stere +lon_0=170 +lat_0=-90")
loc_sf %>%
ggplot() +
geom_sf()
# Set common graphical elements ------------------------------------------
crs <- "+proj=stere +lon_0=170 +lat_0=-90 +units=m +datum=WGS84"
proj <- "+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"
loc_sf <- loc %>%
st_as_sf(coords = 7:8, crs = proj) %>%
st_transform(crs = crs)
loc_sf %>%
ggplot() +
geom_sf()
st_coordinates(loc_sf)[, 1]
loc_final <- loc %>%
filter(trip == 1) %>%
mutate(
x = st_coordinates(loc_sf)[, 1],
y = st_coordinates(loc_sf)[, 2]
) %>%
select(x, y, date, id)
loc_final <- loc_sf %>%
filter(trip == 1) %>%
mutate(x = st_coordinates(loc_sf)[, 1],
y = st_coordinates(loc_sf)[, 2]) %>%
select(x, y, date, id)
loc_final <- loc_sf %>%
mutate(x = st_coordinates(loc_sf)[, 1],
y = st_coordinates(loc_sf)[, 2]) %>%
filter(trip == 1) %>%
select(x, y, date, id)
loc_sf %>%
mutate(x = st_coordinates(loc_sf)[, 1],
y = st_coordinates(loc_sf)[, 2]) %>%
# filter(trip == 1) %>%
select(x, y, date, id)
loc_sf
st_coordinates(loc_sf)[, 1]
loc_sf %>%
mutate(x = st_coordinates(loc_sf)[, 1],
y = st_coordinates(loc_sf)[, 2])
loc_sf
loc_sf %>%
mutate(lon = st_coordinates(loc_sf)[, 1],
lat = st_coordinates(loc_sf)[, 2])
loc_final <- loc_sf
loc_final
loc
loc_final$x = st_coordinates(loc_sf)[, 1],
y = st_coordinates(loc_sf)[, 2])
loc_final$x = st_coordinates(loc_sf)[, 1]
loc_final
loc
loc_final$y = st_coordinates(loc_sf)[, 2])
loc_final$y = st_coordinates(loc_sf)[, 2]
loc_final
loc
loc_final <- loc_final %>%
select(x, y, date, id)
loc_final <- loc_final %>%
dplyr::select(x, y, date, id)
loc_final
st_geometry(loc_final) <- NULL
loc_final
build_report(loc_final %>% filter(id == "mq4-Billie-00"),
path = './',
proj4 = crs,
stats = c("rolling", "diurnal", "lunar"))
build_report(loc_final,
path = './',
proj4 = crs,
stats = c("rolling", "diurnal", "lunar"))
loc_final
loc_final %>% summary
build_report(loc_final,
path = './',
proj4 = crs,
stats = c("rolling", "diurnal", "lunar"))
loc_sf %>%
ggplot() +
geom_sf()
seals
getwd()
build_report(loc_final %>% filter(id == "mq4-Alice-00"),
path = '~/Users/dahliafoo/OneDrive - University of Tasmania/Elephant-Weaners',
proj4 = crs,
stats = c("rolling", "diurnal", "lunar"))
build_report(loc_final %>% filter(id == "mq4-Alice-00"),
path = '~/Users/dahliafoo/OneDrive - University of Tasmania/Elephant-Weaners/',
proj4 = crs,
stats = c("rolling", "diurnal", "lunar"))
build_report(loc_final %>% filter(id == "mq4-Alice-00"),
path = '~/OneDrive - University of Tasmania/Elephant-Weaners/',
proj4 = crs,
stats = c("rolling", "diurnal", "lunar"))
build_report(loc_final %>% filter(id == "mq4-Alice-00"),
path = '~/OneDrive - University of Tasmania/Elephant-Weaners/',
proj4 = crs,
stats = c("rolling", "diurnal", "lunar"),
construct = "akde")
build_report(loc_final %>% filter(id == "mq4-Alice-00"),
path = '~/OneDrive - University of Tasmania/Elephant-Weaners',
proj4 = crs,
stats = c("rolling", "diurnal", "lunar"),
construct = "akde")
# Plot
ggplot() +
# geom_sf(data = hr_sf %>% filter(level == 0.95)) +
geom_sf(data = hr_sf %>% filter(level == 0.5), aes(fill = survive), alpha = 0.5) +
geom_sf(data = mq_sf, size = 0.5, colour = 'red') +
xlim(bb[1], bb[2]) + ylim(bb[3], bb[4])
ls()
# Load packages -----------------------------------------------------------
library(tidyverse)
# devtools::install_github("jmsigner/amt")
library(amt)
source('convert2polarsf.R')
# Set common graphical elements ------------------------------------------
crs <- "+proj=stere +lon_0=170 +lat_0=-90 +units=m +datum=WGS84"
proj <- "+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"
# world map
world_sf <- st_as_sf(rworldmap::getMap(resolution = "li")) %>% st_transform(., crs = crs)
# mq island
mq <- data.frame(lon = 158.95, lat = -54.5)
mq_sf <- convert2polarsf(mq)
# Plot
ggplot() +
# geom_sf(data = hr_sf %>% filter(level == 0.95)) +
geom_sf(data = hr_sf %>% filter(level == 0.5), aes(fill = survive), alpha = 0.5) +
geom_sf(data = mq_sf, size = 0.5, colour = 'red') +
xlim(bb[1], bb[2]) + ylim(bb[3], bb[4])
# Make track object
trk <- loc_s %>%
filter(trip == 1) %>% # first trip only
ungroup() %>%
make_track(lon, lat, date, id = id, crs = sp::CRS(proj), n_seen = n_seen)
# Transform projection
trk_tr <- transform_coords(trk, sp::CRS(crs))
## Nest by ID
# trk1 <- trk %>% nest(data = -"id")
# trk1
# Make template raster for KDE
trast <- make_trast(trk_tr, res = 5000)
# Make track object
trk <- loc_s %>%
filter(trip == 1) %>% # first trip only
ungroup() %>%
make_track(lon, lat, date, id = id, crs = sp::CRS(proj), n_seen = n_seen)
# Transform projection
trk_tr <- transform_coords(trk, sp::CRS(crs))
# Make template raster for KDE
trast <- make_trast(trk_tr, res = 5000)
rm(list= ls())
# Load packages -----------------------------------------------------------
library(tidyverse)
# devtools::install_github("jmsigner/amt")
library(amt)
source('convert2polarsf.R')
# Set common graphical elements ------------------------------------------
crs <- "+proj=stere +lon_0=170 +lat_0=-90 +units=m +datum=WGS84"
proj <- "+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"
# world map
world_sf <- st_as_sf(rworldmap::getMap(resolution = "li")) %>% st_transform(., crs = crs)
# mq island
mq <- data.frame(lon = 158.95, lat = -54.5)
mq_sf <- convert2polarsf(mq)
# Load data ---------------------------------------------------------------
load('./Output/foragingTracks_filtered.RData')
load("./Output/foragingTracks_with_survival.RData")
# raw <- read_csv('./Data/mq-ellie-weaners-argos.csv')
# seal <- loc %>% filter(id == "mq4-Alice-00") %>%
#   mutate(x = lon, y = lat) %>%
#   dplyr::select(id, date, x, y)
# Start -------------------------------------------------------------------
# Make track object
trk <- loc_s %>%
filter(trip == 1) %>% # first trip only
ungroup() %>%
make_track(lon, lat, date, id = id, crs = sp::CRS(proj), n_seen = n_seen)
# Transform projection
trk_tr <- transform_coords(trk, sp::CRS(crs))
# Make template raster for KDE
trast <- make_trast(trk_tr, res = 5000)
dat <- trk_tr %>%
mutate(survive = n_seen > 1) %>%
nest(data = -survive) %>%
filter(!is.na(survive)) %>%
mutate(kde = map(data, hr_kde, trast = trast, levels = c(0.5, 0.95)))
dat <- dat %>%
mutate(n = map_int(data, nrow))
# Convert hr to sf
hr_sf <- dat %>% hr_to_sf(kde, survive, n)
bb <- extent(hr_sf)
# Plot
ggplot() +
# geom_sf(data = hr_sf %>% filter(level == 0.95)) +
geom_sf(data = hr_sf %>% filter(level == 0.5), aes(fill = survive), alpha = 0.5) +
geom_sf(data = mq_sf, size = 0.5, colour = 'red') +
xlim(bb[1], bb[2]) + ylim(bb[3], bb[4])
# Plot
ggplot() +
# geom_sf(data = hr_sf %>% filter(level == 0.95)) +
geom_sf(data = hr_sf %>% filter(level == 0.5), aes(fill = survive), alpha = 0.5) +
geom_sf(data = world_sf, fill = grey(0.4), colour = NA) +
geom_sf(data = mq_sf, size = 0.5, colour = 'red') +
xlim(bb[1], bb[2]) + ylim(bb[3], bb[4])
dat
trk
loc_sf <- convert2polarsf(loc_s)
bb <- extent(loc_sf)
# Plot
ggplot() +
# geom_sf(data = hr_sf %>% filter(level == 0.95)) +
geom_sf(data = hr_sf %>% filter(level == 0.5), aes(fill = survive), alpha = 0.5) +
geom_sf(data = world_sf, fill = grey(0.4), colour = NA) +
geom_sf(data = mq_sf, size = 0.5, colour = 'red') +
xlim(bb[1], bb[2]) + ylim(bb[3], bb[4])
# Set common graphical elements ------------------------------------------
crs <- "+proj=stere +lon_0=170 +lat_0=-90 +units=km +datum=WGS84"
proj <- "+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"
# world map
world_sf <- st_as_sf(rworldmap::getMap(resolution = "li")) %>% st_transform(., crs = crs)
# mq island
mq <- data.frame(lon = 158.95, lat = -54.5)
mq_sf <- convert2polarsf(mq)
# Load data ---------------------------------------------------------------
load('./Output/foragingTracks_filtered.RData')
load("./Output/foragingTracks_with_survival.RData")
# raw <- read_csv('./Data/mq-ellie-weaners-argos.csv')
# seal <- loc %>% filter(id == "mq4-Alice-00") %>%
#   mutate(x = lon, y = lat) %>%
#   dplyr::select(id, date, x, y)
# Start -------------------------------------------------------------------
# Make track object
trk <- loc_s %>%
filter(trip == 1) %>% # first trip only
ungroup() %>%
make_track(lon, lat, date, id = id, crs = sp::CRS(proj), n_seen = n_seen)
# Transform projection
trk_tr <- transform_coords(trk, sp::CRS(crs))
# Make template raster for KDE
trast <- make_trast(trk_tr, res = 5)
dat <- trk_tr %>%
mutate(survive = n_seen > 1) %>%
nest(data = -survive) %>%
filter(!is.na(survive)) %>%
mutate(kde = map(data, hr_kde, trast = trast, levels = c(0.5, 0.95)))
dat <- dat %>%
mutate(n = map_int(data, nrow))
# Convert hr to sf
hr_sf <- dat %>% hr_to_sf(kde, survive, n)
loc_sf <- convert2polarsf(loc_s)
bb <- extent(loc_sf)
# Plot
ggplot() +
# geom_sf(data = hr_sf %>% filter(level == 0.95)) +
geom_sf(data = hr_sf %>% filter(level == 0.5), aes(fill = survive), alpha = 0.5) +
geom_sf(data = world_sf, fill = grey(0.4), colour = NA) +
geom_sf(data = mq_sf, size = 0.5, colour = 'red') +
xlim(bb[1], bb[2]) + ylim(bb[3], bb[4])
?hr_kde
## KDE by survivor
dat <- trk_tr %>%
mutate(survive = n_seen > 1) %>%
nest(data = -survive) %>%
filter(!is.na(survive)) %>%
mutate(kde = map(data, hr_akde, trast = trast, levels = c(0.5, 0.95)))
dat
dat <- dat %>%
mutate(n = map_int(data, nrow))
# Convert hr to sf
hr_sf <- dat %>% hr_to_sf(kde, survive, n)
dat
dat$kde
# Convert hr to sf
hr_sf <- dat %>% hr_to_sf(kde, survive, n)
ggplot() +
# geom_sf(data = hr_sf %>% filter(level == 0.95)) +
geom_sf(data = hr_sf %>% filter(level == 0.95), aes(fill = survive), alpha = 0.5) +
geom_sf(data = world_sf, fill = grey(0.4), colour = NA) +
geom_sf(data = mq_sf, size = 0.5, colour = 'red') +
xlim(bb[1], bb[2]) + ylim(bb[3], bb[4])
ggplot() +
# geom_sf(data = hr_sf %>% filter(level == 0.95)) +
geom_sf(data = hr_sf %>% filter(level == 0.95), aes(fill = survive), alpha = 0.5) +
geom_sf(data = hr_sf %>% filter(level == 0.5), aes(fill = survive), alpha = 0.5) +
geom_sf(data = world_sf, fill = grey(0.4), colour = NA) +
geom_sf(data = mq_sf, size = 0.5, colour = 'red') +
xlim(bb[1], bb[2]) + ylim(bb[3], bb[4])
ggplot() +
geom_sf(data = hr_sf %>% filter(level == 0.95), aes(fill = survive), alpha = 0.5) +
geom_sf(data = world_sf, fill = grey(0.4), colour = NA) +
geom_sf(data = mq_sf, size = 0.5, colour = 'red') +
xlim(bb[1], bb[2]) + ylim(bb[3], bb[4])
# Plot
ggplot() +
# geom_sf(data = hr_sf %>% filter(level == 0.95)) +
geom_sf(data = hr_sf %>% filter(level == 0.5), aes(fill = survive), alpha = 0.5) +
geom_sf(data = world_sf, fill = grey(0.4), colour = NA) +
geom_sf(data = mq_sf, size = 0.5, colour = 'red') +
xlim(bb[1], bb[2]) + ylim(bb[3], bb[4])
# Convert hr to sf
hr_sf <- dat %>% hr_to_sf(kde, survive, n)
## KDE by survivor
dat <- trk_tr %>%
mutate(survive = n_seen > 1) %>%
nest(data = -survive) %>%
filter(!is.na(survive)) %>%
mutate(kde = map(data, hr_kde, trast = trast, levels = c(0.5, 0.95)))
## KDE by survivor
dat <- trk_tr %>%
mutate(survive = n_seen > 1) %>%
nest(data = -survive) %>%
filter(!is.na(survive)) %>%
mutate(kde = map(data, hr_kde, trast = trast, levels = c(0.5, 0.95))) %>%
mutate(n = map_int(data, nrow))
# Convert hr to sf
hr_sf <- dat %>% hr_to_sf(kde, survive, n)
loc_sf <- convert2polarsf(loc_s)
bb <- extent(loc_sf)
# Plot
ggplot() +
# geom_sf(data = hr_sf %>% filter(level == 0.95)) +
geom_sf(data = hr_sf %>% filter(level == 0.5), aes(fill = survive), alpha = 0.5) +
geom_sf(data = world_sf, fill = grey(0.4), colour = NA) +
geom_sf(data = mq_sf, size = 0.5, colour = 'red') +
xlim(bb[1], bb[2]) + ylim(bb[3], bb[4])
png('UD50_survivors.png', width=25, height=20, units='cm',
res=500)
ggplot() +
# geom_sf(data = hr_sf %>% filter(level == 0.95)) +
geom_sf(data = hr_sf %>% filter(level == 0.5), aes(fill = survive), alpha = 0.5) +
geom_sf(data = world_sf, fill = grey(0.4), colour = NA) +
geom_sf(data = mq_sf, size = 0.5, colour = 'red') +
xlim(bb[1], bb[2]) + ylim(bb[3], bb[4])
dev.off()
## Comparing first trips to outcome metrics (i.e. body condition, survival)
rm(list = ls())
library(tidyverse)
library(sf)
library(SGAT)
library(raster)
library(lubridate)
library(foieGras)
library(viridis)
library(tmap)
library(ggpubr)
library(see)
# Load Datasets -----------------------------------------------------------
load('./Output/allFit_prefilter=0.3.RData')
load('./Output/foragingtracks_filtered.RData')
source('convert2polarsf.R')
# Set common graphical elements ------------------------------------------
crs <- "+proj=stere +lon_0=170 +lat_0=-90 +units=km +datum=WGS84"
proj <- "+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"
# world map
world_sf <- st_as_sf(rworldmap::getMap(resolution = "li")) %>% st_transform(., crs = crs)
# mq island
mq <- data.frame(lon = 158.95, lat = -54.5)
mq_sf <- convert2polarsf(mq)
s <- read_csv('./Data/CMC/TAGS/6mth_Macca 180810.csv', col_types = cols('WeaningLength' = 'd',
'WeaningGirth' = 'd'))
s <- s %>% select(-Index)
colnames(s) <- colnames(s) %>% tolower()
s <- s %>%
mutate(birthdate = birthdate %>% dmy(), weandate = weandate %>% dmy()) %>%
rename(seal_ID = sealid)
s1 <- s %>% gather("year_season", "seen", 2:25)
## Create separate year and season columns
s1$season <- 'summer'
s1$season[str_detect(s1$year_season, 'w')] <- 'winter'
s1$year <- s1$year_season %>% str_split(pattern = '[:alpha:]') %>% map(~.x[1]) %>% unlist()
## Summarise survival data...
# some metrics to consider: What is the year/season seal was last seen?
s2 <- s1 %>%
group_by(seal_ID, birthdate, birthyear, birthlocation, weandate, sex, blackmass, weanmass) %>%
summarise(n_seen = sum(seen, na.rm = T))
s2 %>%
ggplot(aes(x = n_seen)) +
geom_histogram(binwidth = 1) # majority only seen once (i.e. when they were tagged)
## Match seal_ID to seal track df
# Load seal IDs matching
load('./Output/seal_ID.RData')
loc_s <- left_join(loc, sealID_all %>% dplyr::select(ref, SEAL_ID) %>% rename(id = ref, seal_ID = SEAL_ID))
loc_s <- loc_s %>% left_join(s2) # ***WHY SOME SEALS NO RESIGHT DATA AT ALL?
## Plot tracks colour coded to n_seen
loc_s_sf <- convert2polarsf(loc_s)
bb <- extent(loc_s_sf)
loc_s_Sf
loc_s_sf
ggplot() +
geom_sf(data = loc_s_sf %>% filter(trip ==1, !is.na(n_seen)), aes(colour = n_seen > 1), size = 0.1) +
geom_sf(data = world_sf, fill = grey(0.4), colour = NA) +
geom_sf(data = mq_sf, size = 0.5, colour = 'red') +
xlim(bb[1], bb[2]) + ylim(bb[3], bb[4]) +
labs(title = 'Survival: if seal was seen again after the first time')
ggplot() +
geom_sf(data = loc_s_sf %>% filter(trip ==1, !is.na(n_seen), SUS == FALSE), aes(colour = n_seen > 1), size = 0.1) +
geom_sf(data = world_sf, fill = grey(0.4), colour = NA) +
geom_sf(data = mq_sf, size = 0.5, colour = 'red') +
xlim(bb[1], bb[2]) + ylim(bb[3], bb[4]) +
labs(title = 'Survival: if seal was seen again after the first time')
png('tracks_seen_again_1map.png', width=25, height=20, units='cm',
res=500)
ggplot() +
geom_sf(data = loc_s_sf %>% filter(trip ==1, !is.na(n_seen), SUS == FALSE), aes(colour = n_seen > 1), size = 0.1) +
geom_sf(data = world_sf, fill = grey(0.4), colour = NA) +
geom_sf(data = mq_sf, size = 0.5, colour = 'red') +
xlim(bb[1], bb[2]) + ylim(bb[3], bb[4]) +
labs(title = 'Survival: if seal was seen again after the first time')
# facet_wrap(~id) +
# facet_wrap(~n_seen > 1) +
# scale_colour_viridis() +
# scale_colour_distiller(palette = 'RdYlBu') +
theme(text = element_text(size = 8))
dev.off()
locs
loc_s
rm(list= ls())
# Load packages -----------------------------------------------------------
library(tidyverse)
# devtools::install_github("jmsigner/amt")
library(amt)
source('convert2polarsf.R')
# Set common graphical elements ------------------------------------------
crs <- "+proj=stere +lon_0=170 +lat_0=-90 +units=km +datum=WGS84"
proj <- "+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"
# world map
world_sf <- st_as_sf(rworldmap::getMap(resolution = "li")) %>% st_transform(., crs = crs)
# mq island
mq <- data.frame(lon = 158.95, lat = -54.5)
mq_sf <- convert2polarsf(mq)
# Load data ---------------------------------------------------------------
load('./Output/foragingTracks_filtered.RData')
load("./Output/foragingTracks_with_survival.RData")
# raw <- read_csv('./Data/mq-ellie-weaners-argos.csv')
# seal <- loc %>% filter(id == "mq4-Alice-00") %>%
#   mutate(x = lon, y = lat) %>%
#   dplyr::select(id, date, x, y)
# Start -------------------------------------------------------------------
# Make track object
trk <- loc_s %>%
filter(trip == 1, SUS == FALSE) %>% # first trip only
ungroup() %>%
make_track(lon, lat, date, id = id, crs = sp::CRS(proj), n_seen = n_seen)
# Transform projection
trk_tr <- transform_coords(trk, sp::CRS(crs))
# Make template raster for KDE
trast <- make_trast(trk_tr, res = 5)
# KDE
dat <- trk_tr %>%
mutate(survive = n_seen > 1) %>%
nest(data = -survive) %>%
filter(!is.na(survive)) %>%
mutate(kde = map(data, hr_kde, trast = trast, levels = c(0.5, 0.95))) %>%
mutate(n = map_int(data, nrow))
# Convert hr to sf
hr_sf <- dat %>% hr_to_sf(kde, survive, n)
loc_sf <- convert2polarsf(loc_s)
bb <- extent(loc_sf)
# Plot
png('UD50_survivors.png', width=25, height=20, units='cm',
res=500)
ggplot() +
# geom_sf(data = hr_sf %>% filter(level == 0.95)) +
geom_sf(data = hr_sf %>% filter(level == 0.5), aes(fill = survive), alpha = 0.5) +
geom_sf(data = world_sf, fill = grey(0.4), colour = NA) +
geom_sf(data = mq_sf, size = 0.5, colour = 'red') +
xlim(bb[1], bb[2]) + ylim(bb[3], bb[4])
dev.off()
png('UD50_survivors.png', width=25, height=20, units='cm',
res=500)
ggplot() +
# geom_sf(data = hr_sf %>% filter(level == 0.95)) +
geom_sf(data = hr_sf %>% filter(level == 0.5), aes(fill = survive), alpha = 0.5) +
geom_sf(data = world_sf, fill = grey(0.4), colour = NA) +
geom_sf(data = mq_sf, size = 0.5, colour = 'red') +
xlim(bb[1], bb[2]) + ylim(bb[3], bb[4]) +
labs(title = 'UD 50%')
dev.off()
